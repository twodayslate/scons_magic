import re
import os

def mudgeBuilder(target, source, env):
    for (i,_s) in enumerate(source):
        with open(_s.abspath, 'r') as s:
            with open(target[i].abspath, 'w+') as t:
                slines = s.readlines()
                for line in slines:
                    if "SCONS_OBFUSCATE" in line:
                        r = r'(\s*).*\*(\w*).*SCONS_OBFUSCATE\(\"(.*)\"\);\s*'
                        matches = re.search(r, line)
                        spacing = matches.group(1)
                        varname = matches.group(2)
                        word = matches.group(3)
                        t.write(spacing + 'char ' + varname + '[%d];\n' % (len(word)+1))
                        for (index, letter) in enumerate(word):
                            t.write('%s%s[%d] = \'%c\';\n' % (spacing, varname, index, letter))
                        t.write('%s%s[%d] = 0;\n' % (spacing, varname, index+1))
                    else:
                        t.write(line)


def mudgeEmitter(target, source, env):
    actualTarget = []
    for s in source:
        path = s.abspath
        path = os.path.join(os.path.split(path)[0], 'munged/'+os.path.split(path)[1])
        actualTarget.append(path)

    return actualTarget, source

bld = Builder(action=mudgeBuilder, emitter=mudgeEmitter)
env = Environment(BUILDERS={'Munge': bld})

env.VariantDir('build', 'src')

munge = env.Munge(Glob('build/*.c'))

p = env.Program('main', munge)
